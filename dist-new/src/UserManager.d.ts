import { OidcClient } from './OidcClient';
import { UserManagerSettings, UserManagerSettingsOptions } from './UserManagerSettings';
import { User } from './User';
import { UserManagerEvents } from './UserManagerEvents';
import { SilentRenewService } from './SilentRenewService';
import { SessionMonitor } from './SessionMonitor';
import { TokenRevocationClient } from './TokenRevocationClient';
import { TokenClient } from './TokenClient';
import { JoseUtil } from './JoseUtil';
import { OidcClientSettings } from './OidcClientSettings';
export declare class UserManager extends OidcClient {
    private _events;
    private _silentRenewService;
    private _sessionMonitor;
    private _tokenRevocationClient;
    private _tokenClient;
    private _joseUtil;
    constructor(settings?: UserManagerSettingsOptions, SilentRenewServiceCtor?: (settings: UserManager) => SilentRenewService, SessionMonitorCtor?: (settings: UserManager) => SessionMonitor, TokenRevocationClientCtor?: (settings: OidcClientSettings) => TokenRevocationClient, TokenClientCtor?: (settings: OidcClientSettings) => TokenClient, joseUtil?: typeof JoseUtil);
    get settings(): UserManagerSettings;
    get _redirectNavigator(): import("./RedirectNavigator").RedirectNavigator;
    get _popupNavigator(): import("./PopupNavigator").PopupNavigator;
    get _iframeNavigator(): import("./IFrameNavigator").IFrameNavigator;
    get _userStore(): import("./WebStorageStateStore").WebStorageStateStoreType;
    get events(): UserManagerEvents;
    getUser(): Promise<User>;
    removeUser(): Promise<void>;
    signinRedirect(args?: any): any;
    signinRedirectCallback(url: any): any;
    signinPopup(args?: any): any;
    signinPopupCallback(url: any): any;
    signinSilent(args?: any): Promise<any>;
    _useRefreshToken(args?: any): Promise<User>;
    _validateIdTokenFromTokenRefreshToken(profile: any, id_token: any): any;
    _signinSilentIframe(args?: any): any;
    signinSilentCallback(url: any): any;
    signinCallback(url: any): any;
    signoutCallback(url: any, keepOpen: any): any;
    querySessionStatus(args?: any): any;
    _signin(args: any, navigator: any, navigatorParams?: {}): any;
    _signinStart(args: any, navigator: any, navigatorParams?: any): any;
    _signinEnd(url: any, args?: any): any;
    _signinCallback(url: any, navigator: any): any;
    signoutRedirect(args?: any): any;
    signoutRedirectCallback(url: any): any;
    signoutPopup(args?: any): any;
    signoutPopupCallback(url: any, keepOpen: any): Promise<void>;
    _signout(args: any, navigator: any, navigatorParams?: {}): any;
    _signoutStart(args: any, navigator: any, navigatorParams?: any): any;
    _signoutEnd(url: any): any;
    revokeAccessToken(): Promise<void>;
    _revokeInternal(user: any, required: any): Promise<boolean>;
    _revokeAccessTokenInternal(access_token: any, required: any): Promise<boolean>;
    _revokeRefreshTokenInternal(refresh_token: any, required: any): Promise<boolean>;
    startSilentRenew(): void;
    stopSilentRenew(): void;
    get _userStoreKey(): string;
    _loadUser(): Promise<User>;
    storeUser(user: any): Promise<string>;
}
